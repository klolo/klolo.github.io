<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: methodology | Łódzki programista]]></title>
  <link href="http://klolo.github.io/blog/categories/methodology/atom.xml" rel="self"/>
  <link href="http://klolo.github.io/"/>
  <updated>2021-03-07T21:35:42+01:00</updated>
  <id>http://klolo.github.io/</id>
  <author>
    <name><![CDATA[Kamil Lolo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mantra architektoniczna]]></title>
    <link href="http://klolo.github.io/blog/2017/08/08/mantra-architektoniczna/"/>
    <updated>2017-08-08T20:54:53+02:00</updated>
    <id>http://klolo.github.io/blog/2017/08/08/mantra-architektoniczna</id>
    <content type="html"><![CDATA[<p>Skąd nowe osoby w Waszym zespole zdobywają wiedzę na temat działania systemu? Z nieaktualnej dokumentacji? Czy bardziej doświadczony programista
poświęca swój czas na przybliżenie wszystkich elementów systemu? Jak często widzisz kod, który znalazł się w nieodpowiednim miejscu Twojej aplikacji?</p>

<!--more-->


<blockquote><p><b>UWAGA.</b> Tekst z nutą kpiny, zakrapiany moim poczuciem humoru. Wrażliwych programistów uprasza się o nieczytanie tego porywającego wpisu.</p></blockquote>

<h2>Akt I</h2>

<p>Czytając kod czasami ma się wrażenie, że ktoś pisał go w pośpiechu bez żadnego przemyślenia. Dlaczego logika biznesowa znajduje sie w DAO? Dlaczego zwykły
obiekt DTO ma w środku w getterze jakiś rozbudowany algorytm? Dlaczego ta klasa ma 10 tysięcy linii? Za co ta klasa tak w ogóle odpowiada!?
Takich bólów w programistycznych kościach można wymieniać bez końca. Jakie jest panaceum na te bóle? Rzucić wszystko i wyjechać w Bieszczady. A tak na poważnie,
jak rozpropagować w całym zespole wiedzę tajemną, o tym jak wygląda architektura systemu, do której dążymy? W końcu architektura nie jest czymś, co architekt
przygotowuje w białej wieży i zrzuca zwykłym programistom jako gotowy dizajn. Architektura jest czymś, co ciągle ulega zmianie, razem z wymaganiami klienta, coś, co ciągle
możemy ulepszać, zmieniać tak, żeby zarówno programista był zadowolony z tego, że pracuje w projekcie, jak i również PM, któremu będzie zgadzać się kasa. W końcu dobra
architektura i czysty kod powinny zapewnić możliwość wprowadzania szybko zmian w systemie, za które klient zapłaci. Żeby ta architektura zmieniała się na lepsze i w jednym kierunku,
a nie w tylu kierunkach, ilu jest developerów w zespole, każdy musi wiedzieć za co odpowiada nawet najmniejszy element tej układanki. Można to osiągnąć poprzez ciągle powtarzanie
tych informacji, aż każdy, nawet stażysta załapie jak to działa.</p>

<h2>Ale o co chodzi?</h2>

<p>Takim ciągłym powtarzaniem informacji o systemie, definiowaniem na nowo każdej warstwy i cegiełki
naszego systemu jest właśnie <em>mantra architektoniczna</em>. Co tak w ogóle oznacza słowo mantra? Definicja z wiki mówi ot tyle:</p>

<blockquote><p>Mantra – w buddyzmie, hinduizmie i ezoteryce formuła, werset lub sylaba, która jest elementem praktyki duchowej.
Jej powtarzanie ma pomóc w opanowaniu umysłu, zaktywizowaniu określonej energii, uspokojeniu, oczyszczeniu go ze splamień.
Szczególnie istotną sprawą jest bezpośredni przekaz z ust wykwalifikowanego nauczyciela (guru), gdyż tylko wtedy mantra uzyskuje właściwą moc.</p></blockquote>

<p>Definicja ta mówi o dwóch bardzo ważnych kwestiach, które również mają odniesienie do mantry architektonicznej. Pierwsza rzecz to to, że mantra składa się z tylko jednego
wersetu lub sylaby, a co za tym idzie jest bardzo krótka. Taka również powinna być mantra architektoniczna. W moim zespole mantra zazwyczaj trwa jedynie 20 minut. Myślę, że jest to czas
jaki każdy PM może zaakceptować jako sposób na utrzymanie systemu w lepszej formie. Druga kwestia to powtarzanie mantry. Zrobienie jednorazowego spotkania nic nie da, ponieważ
niedoskonały człowiek bardzo upodobał sobie zapominanie różnych rzeczy. Żeby mantra miała sens musi być powtarzana regularnie przez dłuższy czas. Z doświadczenia wiem że spotkanie
raz w tygodniu absolutnie wystarczy, jednak nie powinno dojść do sytuacji, kiedy w danym tygodniu nie ma mantry, bo mamy akurat pożar na produkcji, albo klient domaga się kilku nowych
funkcjonalności na wczoraj. Lepiej żeby mantra miała stałą godzinę, o której zespół spotyka się bez względu na aktualną sytuację w projekcie. W podjęciu decyzji o spotkaniu mimo
trudnej sytuacji pomoże na pewno fakt, że mantra jest krótkim spotkaniem. Może byc zrobiona jako przerwa od ciągłego patrzenia w monitor, będzie to kilka minut kiedy programista zobaczy
innego programistę siedzącego obok, być może nawet odezwie się do niego i na chwilę oderwie od zadania, jakie realizuje od kilku godzin nie zważając na pełny pęcherz i brak batoników
do zjedzenia.</p>

<h2>Jak to robić?</h2>

<p>Mantra ma być jak napad na bank, szybka i konkretna. Siadamy w kółku na czym sie tylko da - krzesła, podłoga, pośladki - i zaczynamy nakreślać z jakich warstw składa się system. Możecie
zacząć od samego dołu, lub od samej góry, nie ma to znaczenia. My zaczynamy od warstwy widoku, od tego klient widzi w swojej przeglądarce. W końcu robię aplikacje webowe,
czasami coś w tej przeglądarce, oszpecone css-em uda się zaprezentować. Po omówieniu widoku idziemy dalej - usługi, serwisy, baza danych - każdy kolejny element systemu. Przy omawianiu danej warstwy
wypisujemy na whiteboardzie za co dana warstwa odpowiada, co powinno się tu robić, w jaki  sposób, z czego korzystać, oraz to czego nie powinno tutaj być. Przy omawianiu tego, jakie są
ciemne strony danej warstwy zdarzy się, że któryś z programistów obleje się rumieńcem, taki rodzaj blame w realu. Oprócz omówienia tego, jak jest i jak powinno być, na spotkaniu ustalamy
również kierunek działania. Umawiamy się czego pozbyć się z danej warstwy, co zrefaktorować, jaka konwencja panuje w danej warstwie. Bardzo ważne jest żeby na takich spotkaniach angażować wszystkich
członków zespołu, może tego prowadzić tylko jednak osoba. Każdy powinien się wypowiadać o systemie, tak żeby można było ewentualnie prostować jego światopogląd jeżeli może nam to zrobić
bałagan w systemie.</p>

<p>Bardzo przydatna podczas spotkania jest tablica, na której wszystko wizualizujemy. Prawie nigdy jej nie ścieramy, cięgle coś zmieniamy dopisujemy, ale bardzo rzadko usuwamy coś co już zostało napisane. Tablica
jest w pokoju, gdzie siedzi cały zespół i często widuje się programistów zajadających kanapkę i spacerujących w zamyśleniu obok tablicy. Sprawiają wtedy wrażenie jakby
studiowali, co na niej się znajduje. Na takiej tablicy czasami wiszą również wydrukowane fragmenty kodu przedstawiające wzorcowe implementacje poszczególnych klocków aplikacji.</p>

<h2>Podsumowanie</h2>

<p>Mantra jest krótkim spotkaniem przeprowadzanym w zespole w celu omówienia budowy systemu, strategii dostosowania architektury do zmieniających się wymagań klienta. Uczestnictwo w takim spotkaniach
jest również jedną z najkrótszych sposobów na wdrożenie nowego członka zespołu. Zanim narobi bałaganu w systemie już będzie wiedział gdzie, co powinno się znajdować. Nie mając spisanej dokumentacji
do systemu mantra stanowi jakiś nośnik wiedzy. Wypisane informacje na tablicy można sfotografować i to już jest jakaś forma dokumentacji. Jeżeli mamy nieaktualną to taka będzie dużo lepiej
opowiadać o systemie i zawsze będzie aktualna. Jeżeli nie próbowałeś nigdy tego w swoim zespole, spróbuj, zwołaj zebranie i zapytaj każdego o odpowiedzialności poszczególnych elementów
systemu. Zdziwisz się jak wiele różnych odpowiedzi dostaniesz, jak bardzo różną wizję mogą mieć programiści. Podczas takiego spotkania pojawiają się również pytania, na które odpowiedź powinien
znać każdy, a niekoniecznie tak jest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programistyczne kata]]></title>
    <link href="http://klolo.github.io/blog/2017/08/04/programistycze-kata/"/>
    <updated>2017-08-04T23:25:49+02:00</updated>
    <id>http://klolo.github.io/blog/2017/08/04/programistycze-kata</id>
    <content type="html"><![CDATA[<p>Chcesz pisać lepszy kod? Zainteresuj się ćwiczeniami kata.</p>

<!--more-->




<div style="text-align:center">
    <img src="http://totalcombat.net/wp-content/uploads/2012/12/shotokan-kata-1.jpg" />
</div>


<p>Co w ogóle oznacza to słowo?</p>

<p>Kata to nazwa zestawu technik ze sztuk walki, które wykonuje się setki razy, żeby osiągnąć perfekcję w każdej z nich. Każde kolejne
kata jest inne niż poprzednie. Za każdym razem dochodzi jakaś nowe kopnięcie, cios, którego wcześniej adept sztuk walki nie znał. Tak samo sprawa ma się
z kata programistycznym. Jest to proste ćwiczenie, którego realizacja powinna zając od kilkunastu minut do kilku godzin. Ma ono na celu
przećwiczenie nowego języka, nowej techniki i rozbudowanie umiejętności algorytmicznych. Oczywiście to czy skorzystasz z czegoś nowego podczas
rozwiązywania takiego zadania zależy od Ciebie. Jednak wykonywanie kata korzystając ciągle z tych samych metod, nie przyniesie tak dobrych wyników
jak eksperymentowanie, szukanie nowych rozwiązań. Tak więc, jeżeli pracujesz na co dzień z kodem obiektowym, spróbuj wykonywać kata w języku funkcyjnym.</p>

<p>Gdzie można znaleźć kata? Polecam odwiedzić <a href="https://www.codewars.com.">https://www.codewars.com.</a> Po założeniu konta dostaniesz dostęp do kilku tysięcy kata, które można rozwiązywać w kilku językach.
Po rozwiązaniu problemu jest także opcja porównania rozwiązań z innymi użytkownikami. Jak wygląda przykładowe kata z codewars? Na przykład tak:</p>

<blockquote><p>Write a function that takes an (unsigned) integer as input, and returns the number of bits that are equal to one in the binary representation of that number.
  Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case.</p></blockquote>

<p>Do tak zdefiniowanego kata należy napisać kod, który przechodzi takie testy jednostkowe:
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGame</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">BitCount</span><span class="o">.</span><span class="na">countBits</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">BitCount</span><span class="o">.</span><span class="na">countBits</span><span class="o">(</span><span class="mi">1234</span><span class="o">));</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">BitCount</span><span class="o">.</span><span class="na">countBits</span><span class="o">(</span><span class="mi">7</span><span class="o">));</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">BitCount</span><span class="o">.</span><span class="na">countBits</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">BitCount</span><span class="o">.</span><span class="na">countBits</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
<span class="o">}</span></code></pre></div></p>

<p>PS. Nie korzystaj z metody bitCount ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wstęp do programowania funkcyjnego]]></title>
    <link href="http://klolo.github.io/blog/2017/08/04/wstep-do-programowania-funkcyjnego/"/>
    <updated>2017-08-04T20:25:49+02:00</updated>
    <id>http://klolo.github.io/blog/2017/08/04/wstep-do-programowania-funkcyjnego</id>
    <content type="html"><![CDATA[<p>Ten wpis ma na celu wyjaśnienie czym jest programowanie funkcyjne oraz przedstawienie podstawowych zasad panujących w świecie programowania funkcyjnego.</p>

<!--more-->


<h2>Programowanie deklaratywne vs imperatywne</h2>

<p>Wprowadzenie do programowania funkcyjnego zacznę od przypomnienia czym jest paradygmat programowania deklaratywnego. Jest to podejście, w którym tworząc
 kod skupiamy na się na tym co ma zostać wykonane, a nie w jaki sposób. Szczegóły implementacji pozostawiamy np. bibliotece, odwracając w ten sposób
  kontrolę nad kodem. W końcu wszyscy lubią odwracanie kontroli (inversion of control) ;). Tak napisany kod jest bardziej zwięzły i czytelniejszy z powodu
  mniejszej ilości zbędnego szumu. Pewnie setki razy zdarzyło Ci się napisać: for(int i=0; i&lt;&hellip; Czy nie uważasz, że w większości przypadków
  tak napisany kod jest złem koniecznym, niezbędnym do osiągnięcia określonego działania aplikacji? Podejście, w którym wykorzystywane są instrukcje sterujące
   kodem nazywane jest programowaniem imperatywnym. Jest to przeciwieństwo programowania deklaratywnego, gdzie nie tylko trzeba martwić się co ma robić kod,
    ale również w jaki sposób to osiągnąć. Programowanie funkcyjne idzie w parze z programowaniem deklaratywnym, dzięki czemu kod będzie krótszy niż ten klasyczny
    obiektowo imperatywny.
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Ewa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Bartek</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Adam</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 1. imperatywnie</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">users</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 2. deklaratywnie</span>
<span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">print</span><span class="o">);</span></code></pre></div></p>

<h2>Co to jest programowanie funkcyjne?</h2>

<p>Programowanie funkcyjne to programowanie, w którym najważniejszą rolę pełnią funkcje. Możesz śmiało zaprotestować: Zaraz, zaraz&hellip;Czy czasami mój obiektowy kod nie składa się
również z funkcji? Ależ tak! Jednak zasadnicza równica jest taka, że w FP (ang. Functional programming) funkcje służą do opisu przepływu sterowania i operacji - a nie
 tak jak to ma miejsce w przypadku programowania obiektowego - do zmiany stanu obiektów. Z tego założenia wynika również jedna z cech programowania obiektowego - niezmienność obiektów.
 Czym jeszcze charakteryzuje się FP? O tym w dalszej części.</p>

<h2>Czyste funkcje</h2>

<p>Czyste funkcje to funkcje bez efektów ubocznych. Są one elementem, bez którego nie da się pisać funkcyjnie. Nie zależą one od żadnych zmienny zewnętrznych np. pól w
klasie, a wszystkie dane są przekazywane jako parametry. Dlatego też dla podanego zestawu danych czysta funkcja zawsze zwróci taki sam wynik. Zaburzeniem tego może być
również wykorzystanie w funkcji instrukcji random, w której wynik operacji nie jest stały dla danych parametrów. Czyste funkcje również nie modyfikują stanów zewnętrznych
np. pól w klasie, lecz każdy wynik jest zwracany jako wynik funkcji.</p>

<h2>Funkcje jako obywatele pierwszej klasy</h2>

<p>Pod tym pojęciem kryje się zdolność języka do traktowania funkcji na równi z obiektami klas tzn. funkcje można przekazywać jako parametry do metod, można je przypisywać
do zmiennych oraz tworzyć wewnątrz funkcji. Przed Java 8, język nie był wyposażony w elementy, które na to pozwalały. Jak to zrealizować w Java 8 pokazuje poniższy przykład.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Przypisanie funkcji do zmiennej</span>
<span class="kd">final</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Double</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="n">circleArea</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">PI</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Przekazanie funkcji do metody</span>
<span class="kt">void</span> <span class="nf">showCalculatedArea</span><span class="o">(</span><span class="kd">final</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Double</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="n">algorithm</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">algorithm</span><span class="o">.</span><span class="na">apply</span><span class="o">&amp;</span><span class="n">reg</span><span class="o">;);</span>
<span class="o">}</span></code></pre></div></p>

<h2>Niezmienność obiektów</h2>

<p>Jest to cecha FP związana z czystymi funkcjami. W językach czysto funkcyjnych często nie istnieje pojęcie zmiennej, tak więc wszystkie tworzone obiekty są niezmienne. Dzięki
takiemu podejściu nie ma możliwości zmiany stanów ani przekazanych do funkcji parametrów, jak i pól w klasie, trudniej jest w funkcji wykonać efekt uboczny. W związku z czym
final jest zawsze mile widziany. Jak ułatwić sobie życie w takim kodzie? Polecam bardzo buildery, czy to te implementowane przez Ciebie, czy też te generowane automatycznie
np. za pomocą Lombok-a. Builder ma dwie zasadnicze zalety. Pierwsza to to że nie musimy używać konstruktorów z wieloma parametrami gdzie oraz to, że mimo użycia tylko
stałych pól w klasie możemy utworzyć obiekt w kilku krokach. Jak wygląda najprostszy builder?</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kd">private</span> <span class="nf">User</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserBuilder</span> <span class="nf">builder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">UserBuilder</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UserBuilder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">UserBuilder</span> <span class="nf">age</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">UserBuilder</span> <span class="nf">name</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">User</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Jak widać wszystkie pola w klasie User są stałe i nie mamy potrzeby eksponować na zewnątrz <em>brzydkiego</em> konstruktora z wszystkimi polami. Dodatkowo w metodzie build możemy
umieścić logikę walidującą stan danych przed utworzeniem obiektu. Przykładowe użycie buildera wygląda następująco:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="n">UserBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">builder</span><span class="o">();</span>
    <span class="n">builder</span>
            <span class="o">.</span><span class="na">age</span><span class="o">(</span><span class="mi">18</span><span class="o">)</span>
            <span class="o">.</span><span class="na">name</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Frank</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span></code></pre></div></p>

<p>Dzięki wykorzystaniu wzorca fluent interface mamy możliwość łączenia metod w ciąg wywołań.</p>

<h2>Podsumowanie</h2>

<p>Dzięki temu, że funkcje nie mają efektów ubocznych, wynik działania jest łatwiejszy zarówno do przewidzenia jak i do przetestowania. Dodatkowo czysta funkcja dla podanych parametrów
zawsze zwróci ten sam wynik, dlatego można z łatwością wykorzystać cache w celu optymalizacji aplikacji. Dzięki używaniu czystych funkcji znikną również największe problemy
z wielowątkowością, takie jak jednoczesna modyfikacja wspólnych danych przez kilka wątków. Możemy skupić się również na tym co mają robić nasze funkcje, a nie w jaki sposób
implementować np. pętle lub warunek. Łatwiej jest nam również reużywać napisany wcześniej kod. Jakie są natomiast zalety tego, że obiekty są niezmienne? Łatwiej
przewidzieć co się w nich znajduje, dzięki czemu można szybciej zdiagnozować i poprawić ewentualne błędy.</p>
]]></content>
  </entry>
  
</feed>
